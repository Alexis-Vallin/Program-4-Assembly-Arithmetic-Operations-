.data  # data segment (where we are declaring our variables)

slopeMessage:    
    .string "Enter slope (m): "  # Prompt for slope
    
inputMessage:
    .string "\nEnter input value (x): " # Prompt for input value (x)
    
yInterceptMessage:
    .string "\nEnter a Y intercept (b): " # Prompt for Y intercept
    
finalValueMessage:    
    .string "\nThe value of your slope is:  "  # Output message for final value of slope
    
    
.bss # Area where we are declaring uninitialized variables that the user will initialize

	.lcomm slopeM, 8
	.lcomm inputValueX, 8
	.lcomm yInterceptB, 8
	
.text  # code segment (where all of our instructions go)

.global main

main:

    # Prompting user for Slope

    movq $4, %rax # Enacts sys_write    
	movq $1, %rbx # Tells sys_write to write output to standard output ($1 = stdout)
	movq $slopeMessage, %rcx # Puts slopeMessage in the argument of sys_write for what to output
	movq $17, %rdx # Length of string message to be written to standard output
	int $0x80 # System interrupt
	
    
    # Reading input for slopeM
    
    movq $3, %rax # Enacts sys_read
    movq $0, %rbx # Tells sys_read to read input to stdin
    movq $slopeM, %rcx # The destination (slopeM) for the user's input  
    movq $0x8, %rdx # Length of bytes we are allowing for the user to enter
    int $0x80 # System interrupt
    
    # Prompting user for Input Value

    movq $4, %rax # Enacts sys_write    
	movq $1, %rbx # Tells sys_write to write output to standard output ($1 = stdout)
	movq $inputMessage, %rcx # Puts slopeMessage in the argument of sys_write for what to output
	movq $24, %rdx # Length of string message to be written to standard output
	int $0x80 # System interrupt
	
    
    # Reading input for inputValueX
    
    movq $3, %rax # Enacts sys_read
    movq $0, %rbx # Tells sys_read to read input to stdin
    movq $inputValueX, %rcx # The destination (slopeM) for the user's input  
    movq $0x8, %rdx # Length of bytes we are allowing for the user to enter
    int $0x80 # System interrupt
    
    # Prompting user for Y Intercept 

    movq $4, %rax # Enacts sys_write    
	movq $1, %rbx # Tells sys_write to write output to standard output ($1 = stdout)
	movq $yInterceptMessage, %rcx # Puts slopeMessage in the argument of sys_write for what to output
	movq $26, %rdx # Length of string message to be written to standard output
	int $0x80 # System interrupt
	
    
    # Reading input for yInterceptB
    
    movq $3, %rax # Enacts sys_read
    movq $0, %rbx # Tells sys_read to read input to stdin
    movq $yInterceptB, %rcx # The destination (slopeM) for the user's input  
    movq $0x8, %rdx # Length of bytes we are allowing for the user to enter
    int $0x80 # System interrupt
    
    ret
    
/*

Prompt for slope

    read slope

Prompt for input value

    read input value

Prompt for Y intercept

    read Y intercept

With values read, compute slope intercept formula



*/


    
